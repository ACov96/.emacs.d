#+TITLE: Alex's Emacs Configuration
#+AUTHOR: Alex Covington
#+STARTUP: overview

* Table of Contents                                                   :TOC_4:
- [[#about-this-config][About this config]]
  - [[#alex-namespace][=alex/= Namespace]]
  - [[#keyboard-navigation][Keyboard Navigation]]
- [[#configuration][Configuration]]
  - [[#emacs-initialization][Emacs Initialization]]
    - [[#settings][Settings]]
    - [[#package-management][Package Management]]
    - [[#helper-functions][Helper Functions]]
  - [[#packages][Packages]]
    - [[#colors--theming][Colors & Theming]]
      - [[#monokai-theme][monokai-theme]]
      - [[#beacon][beacon]]
      - [[#color-theme-sanityinc-tomorrow][color-theme-sanityinc-tomorrow]]
      - [[#emacs-emojify][emacs-emojify]]
      - [[#helper-functions-1][Helper functions]]
    - [[#controls--keybindings][Controls & Keybindings]]
      - [[#evil-mode][evil-mode]]
      - [[#evil-collection][evil-collection]]
      - [[#general][general]]
      - [[#helm][helm]]
      - [[#ace-window][ace-window]]
      - [[#which-key][which-key]]
    - [[#programming-lanuages][Programming Lanuages]]
      - [[#common-lisp][Common Lisp]]
    - [[#editing][Editing]]
      - [[#company--lsp-and-other-code-completion][Company + LSP (and other code-completion)]]
    - [[#file-management][File Management]]
      - [[#treemacs][treemacs]]
      - [[#treemacs-evil][treemacs-evil]]
    - [[#org-mode][Org Mode]]
      - [[#general-configuration][General Configuration]]
      - [[#org-bullets][org-bullets]]
      - [[#toc-org][toc-org]]
      - [[#mixed-pitch][mixed-pitch]]
      - [[#org-appear][org-appear]]
      - [[#org-superstar][org-superstar]]
    - [[#git--version-control][Git & Version Control]]
      - [[#magit][magit]]
    - [[#utilities][Utilities]]
      - [[#dashboard][dashboard]]
      - [[#all-the-icons][all-the-icons]]
      - [[#projectile][projectile]]
      - [[#olivetti][olivetti]]
      - [[#powerline][powerline]]

* About this config

I've been an avid Emacs enthusiast since 2016, which is not long relative to the lifespan of Emacs. However in that time, I have learned that one of the best ways to manage the unwieldly =init.el= is to use a [[https://harryrschwartz.com/2016/02/15/switching-to-a-literate-emacs-configuration][literate configuration]] to make it easier to read and write my Emacs configuration.

In an attempt to keep my own Emacs Lisp separate from other packages, I will generally namespace my custom variables and functions with =alex/=.

Much of the workflow and default keybindings are heavily inspired by [[https://www.spacemacs.org/][Spacemacs]], the spacebar is used to bring up a menu to then select the command you want to run. You can also simply press space and wait a few seconds to see what shortcuts are bound.

** =alex/= Namespace

I'll try my best to keep this table updated with all of the =alex/= namespaced functions and variables.

| *Function*           | *Description*                               |
|--------------------+-------------------------------------------|
| alex/dark-mode     | Set theme to "dark mode."                 |
|--------------------+-------------------------------------------|
| alex/light-mode    | Set theme to "light mode."                |
|--------------------+-------------------------------------------|
| alex/open-config   | Open this configuration file.             |
|--------------------+-------------------------------------------|
| alex/reload-config | Reload this configuration file.           |
|--------------------+-------------------------------------------|
| alex/is-windows    | Returns =t= if current platform is Windows. |
|--------------------+-------------------------------------------|
| alex/is-linux      | Returns =t= if current platform is Linux.   |


(/No variables currently, but this is where they would go if I had some./)

| *Variable* | *Description* |
|----------+-------------|
|          |             |

** Keyboard Navigation

Similar to Spacemacs, everything in this configuration is driven by the spacebar. If you want to open a file, hit =SPC f= and type the file name. Here is the (mostly) complete list of bindings:

| Shortcut | Command                    | Description                                               |
|----------+----------------------------+-----------------------------------------------------------|
| SPC f    | find-file                  | Open file.                                                |
|----------+----------------------------+-----------------------------------------------------------|
| SPC b    | helm-buffers-list          | Switch/select buffer.                                     |
|----------+----------------------------+-----------------------------------------------------------|
| SPC x    | kill-buffer                | Kill current buffer.                                      |
|----------+----------------------------+-----------------------------------------------------------|
| SPC d    | delete-window              | Delete current window.                                    |
|----------+----------------------------+-----------------------------------------------------------|
| SPC s    | save-buffer                | Save buffer to file.                                      |
|----------+----------------------------+-----------------------------------------------------------|
| SPC SPC  | helm-M-x                   | Use Helm to select a command. Replaces M-x.               |
|----------+----------------------------+-----------------------------------------------------------|
| SPC /    | split-window-right         | Split window vertically, create new window on right side. |
|----------+----------------------------+-----------------------------------------------------------|
| SPC _    | split-window-below         | Split window horizontally, create new window on bottom.   |
|----------+----------------------------+-----------------------------------------------------------|
| SPC w    | ace-window                 | Switch window.                                            |
|----------+----------------------------+-----------------------------------------------------------|
| SPC `    | eshell                     | Open the Emacs shell.                                     |
|----------+----------------------------+-----------------------------------------------------------|
| SPC t    | treemacs                   | Open the Treemacs sidebar.                                |
|----------+----------------------------+-----------------------------------------------------------|
| SPC +    | text-scale-increase        | Increase text size                                        |
|----------+----------------------------+-----------------------------------------------------------|
| SPC -    | text-scale-decrease        | Decrease text size                                        |
|----------+----------------------------+-----------------------------------------------------------|
| SPC g    | magit                      | Open Magit, a Git frontend.                               |
|----------+----------------------------+-----------------------------------------------------------|
| SPC q    | save-buffers-kill-terminal | Save buffers and close Emacs.                             |
|----------+----------------------------+-----------------------------------------------------------|
| SPC p    | projectile-command-map     | Open Projectile commands.                                 |

* Configuration
** Emacs Initialization
*** Settings

Disable annoying UI elements, we don't need them in Emacs :).
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

#+end_src

Add line/column numbers to the modeline.
#+begin_src emacs-lisp
  (line-number-mode t)
  (column-number-mode t)
  (size-indication-mode t)
#+end_src

Don't show the default startup screen/messages, we'll use =dashboard= for that.
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t
        inhibit-startup-message t)
#+end_src

Some miscellaneous stuff.
#+begin_src emacs-lisp
  ;; Don't use tabs
  (setq-default indent-tabs-mode nil)

  ;; Auto-insert matching parens/brackets/quotes
  (electric-pair-mode)

  ;; Always show line numbers in programming modes
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)

  ;; Turn off the bell noise, mostly for Windows
  (setq visible-bell 1)
#+end_src
*** Package Management
#+begin_src emacs-lisp
  ;; Setup MELPA and use-package
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

*** Helper Functions

Some general helper functions for controlling Emacs.

Open the config file.
#+begin_src emacs-lisp
  (defun alex/open-config () (interactive)
         (find-file "~/.emacs.d/configuration.org"))
#+end_src

Reload config file.
#+begin_src emacs-lisp
  (defun alex/reload-config () (interactive)
         (load-file "~/.emacs.d/init.el"))
#+end_src

Which platform are we on? Some helpers to figure that out.
#+begin_src emacs-lisp
  (defun alex/is-windows () (interactive)
         (eq system-type 'windows-nt))
  (defun alex/is-linux () (interactive)
         (eq system-type 'gnu/linux))
#+end_src
** Packages
*** Colors & Theming
**** monokai-theme

Monokai is a great dark theme to have around and is historically my default theme, but I'm currently using =solarized-theme= to have a more consistent dark/light mode combo.

#+begin_src emacs-lisp
  ;; (use-package monokai-theme
  ;;   :disable
  ;;   :ensure t)
#+end_src
**** beacon
#+begin_src emacs-lisp
  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1))
#+end_src
**** color-theme-sanityinc-tomorrow

#+begin_src emacs-lisp
  (use-package color-theme-sanityinc-tomorrow
    :ensure t
    :config
    (color-theme-sanityinc-tomorrow-night))
#+end_src
**** emacs-emojify
Emojis! :smile: 

#+begin_src emacs-lisp
  (use-package emojify
    :ensure t
    :hook (after-init . global-emojify-mode))
#+end_src

**** Helper functions

#+begin_src emacs-lisp
  (defun alex/dark-mode () (interactive)
         (color-theme-sanityinc-tomorrow-night))

  (defun alex/light-mode () (interactive)
         (color-theme-sanityinc-tomorrow-day))
#+end_src
*** Controls & Keybindings
**** evil-mode
#+begin_src emacs-lisp
  (use-package evil
    :demand t
    :bind (("<escape>" . keyboard-escape-quit))
    :init
    (setq evil-want-keybinding nil
          evil-cross-lines t)
    :config
    (evil-mode 1)
    (define-key evil-motion-state-map " " nil)
    (evil-set-undo-system 'undo-redo))
#+end_src

**** evil-collection
#+begin_src emacs-lisp
  (use-package evil-collection
    :demand t
    :after evil
    :config
    (setq evil-want-integration t)
    (evil-collection-init))
#+end_src

**** general
#+begin_src emacs-lisp
  (use-package general
    :demand t
    :config
    (require 'general)
    (general-evil-setup t)
    (nvmap :prefix "SPC"
      "f" 'find-file
      "b" 'helm-buffers-list
      "x" 'kill-buffer
      "d" 'delete-window
      "s" 'save-buffer
      "SPC" 'helm-M-x
      "/" 'split-window-right
      "_" 'split-window-below
      "w" 'ace-window
      "`" 'eshell
      "t" 'treemacs
      "+" 'text-scale-increase
      "-" 'text-scale-decrease
      "g" 'magit
      "q" 'save-buffers-kill-terminal
      "p" 'projectile-command-map))
#+end_src

**** helm
#+begin_src emacs-lisp
  (use-package helm
    :ensure t
    :config
    (global-set-key (kbd "M-x") 'helm-M-x))
#+end_src

**** ace-window
#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t)
#+end_src

**** which-key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+end_src
        
*** Programming Lanuages
**** Common Lisp
***** slime
#+begin_src emacs-lisp
  (use-package slime
    :ensure t
    :config
    (setq inferior-lisp-program "sbcl")
    (if (file-exists-p "~/quicklisp/slime-helper.el")
        (load (expand-file-name "~/quicklisp/slime-helper.el"))))
#+end_src
        
*** Editing
**** Company + LSP (and other code-completion)
***** lsp-mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :init
    (setq lsp-keymap-prefix "C-c l")
    :hook ((c++-mode . lsp-deferred)
           (c-or-c++-mode . lsp-deferred)
           (lsp-mode . lsp-enable-which-key-integration))
    :commands (lsp lsp-deferred)
    :config
    (setq lsp-warn-no-matched-clients nil))
#+end_src

***** lsp-ui
#+begin_src emacs-lisp
  (use-package lsp-ui
    :ensure t
    :hook (lsp-mode . lsp-ui-mode)
    :config
    (setq lsp-ui-doc-position 'bottom))
#+end_src

***** helm-lsp
#+begin_src emacs-lisp
  (use-package helm-lsp
    :ensure t
    :commands helm-lsp-workspace-symbol)
#+end_src

***** company
#+begin_src emacs-lisp
  (use-package company
    :after lsp-mode
    :ensure t
    :bind
    (:map company-active-map
          ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))
#+end_src

***** company-box
#+begin_src emacs-lisp
  (use-package company-box
    :ensure t
    :hook (company-mode . company-box-mode))
#+end_src
        
***** company-posframe
#+begin_src emacs-lisp
  (use-package company-posframe
    :ensure t
    :config
    (company-posframe-mode 1))
#+end_src
*** File Management
**** treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :config
    (define-key treemacs-mode-map " " nil))
#+end_src

**** treemacs-evil
#+begin_src emacs-lisp
  (use-package treemacs-evil
    :ensure t
    :after (treemacs evil))
#+end_src
        
*** Org Mode
**** General Configuration
Hide emphasis markup for /italics/ and *bold*.
#+begin_src emacs-lisp
  (setq org-hide-emphasis-markers t)
#+end_src

Replace list markers with center dot.
#+begin_src emacs-lisp
   (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+end_src

Nice line wrapping.
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'visual-line-mode)
#+end_src

#+begin_src emacs-lisp
  (setq org-startup-indented t
        org-pretty-entities t
        org-hide-emphasis-markers t
        org-startup-with-inline-images t
        org-image-actual-width '(300))
#+end_src

Unbind the default =org-mode= header navigation bindings, it conflicts with =evil-mode= visual line movement.
#+begin_src emacs-lisp
  (define-key org-mode-map (kbd "<normal-state> g j") nil)
  (define-key org-mode-map (kbd "<normal-state> g k") nil)
#+end_src

Don't display line numbers in =org-mode=
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda () (display-line-numbers-mode -1)))
#+end_src

Disable auto-indentation in =org-mode= since it can conflict with =evil-mode= when writing source blocks.
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda () (electric-indent-local-mode -1)))
  (add-hook 'electric-indent-functions
            (lambda (x) (when (eq 'org-mode major-mode) 'no-indent)))
#+end_src
**** org-bullets
#+begin_src emacs-lisp
  ;; (use-package org-bullets
  ;;   :config
  ;;   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src
**** toc-org
Keep the *Table of Contents* up-to-date auto-magically:
#+begin_src emacs-lisp
  (use-package toc-org
    :ensure t
    :config
    (add-hook 'org-mode-hook 'toc-org-mode))
#+end_src
**** mixed-pitch
#+begin_src emacs-lisp
  (use-package mixed-pitch
    :ensure t
    :hook
    (text-mode . mixed-pitch-mode)
    :config
    (set-face-attribute 'default nil :font "Hack Nerd Font Mono" :height 130)
    (set-face-attribute 'fixed-pitch nil :font "Hack Nerd Font Mono")
    (set-face-attribute 'variable-pitch nil :font "Hack Nerd Font"))
#+end_src
**** org-appear
#+begin_src emacs-lisp
  (use-package org-appear
    :ensure t
    :hook (org-mode . org-appear-mode))
#+end_src
**** org-superstar
#+begin_src emacs-lisp
  (use-package org-superstar
    :ensure t
    :config
    (setq org-superstar-special-todo-items t)
    (add-hook 'org-mode-hook (lambda ()
                               (org-superstar-mode 1))))
#+end_src
*** Git & Version Control
**** magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src
*** Utilities
**** dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :after (all-the-icons projectile)
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-center-content t
          dashboard-banner-logo-title "Alex's Emacs"
          dashboard-startup-banner 'logo
          dashboard-items '((recents . 5)
                            (projects . 5)
                            (agenda . 5)
                            (bookmarks . 5))
          dashboard-set-heading-icons t
          dashboard-set-file-icons t
          dashboard-set-init-info t))
#+end_src
**** all-the-icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))
#+end_src
**** projectile
#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :init
  (projectile-mode +1))
#+end_src
**** olivetti

=olivetti= is used to center text and make it easier to write prose and non-code documents.

#+begin_src emacs-lisp
  (use-package olivetti
    :ensure t
    :config
    (add-hook 'olivetti-mode (lambda () (display-line-numbers-mode -1)))
    (add-hook 'org-mode-hook 'olivetti-mode)
    (setq olivetti-recall-visual-line-mode-entry-state t
          olivetti-minimum-body-width 120))
#+end_src
**** powerline
#+begin_src emacs-lisp
  (use-package powerline
    :ensure t
    :config
    (powerline-default-theme))
#+end_src
